#!/bin/bash

#functions
usage()
{
    echo "usage perfMemPlus -o output -c samplerate -a allocationMinSize -h help -- application"
}

#default argument values
sampleRate=2000
filename=./perf.db
perf=./perf
allocationMinSize=0
l1MissLatency=0
dramBandwidth=0
sampleWrite=0

#argument parsing
while [ "$1" != "" ]; do
    case $1 in
        -o | --output )            shift
                                   filename=$1
                                   ;;
        -c | --samplerate )        shift
                                   sampleRate=$1
                                   ;;
        -a | --allocationMinSize)  shift
                                   allocationMinSize=$1
                                   ;;
		    --dramBandwidth)
					                         dramBandwidth=1
																	 ;;
	      --l1MissLatency)
					                         l1MissLatency=1
																	 ;;
        -h | --help )              usage
                                 exit
                                 ;;
        * )											 break
    esac
    shift
done

cycleSampleRate=$(($sampleRate*10000))
l1MissSampleRate=$(($sampleRate*500))
offcoreSampleRate=$(($sampleRate*2))
writeSampleRate=$(($sampleRate*100))


rm /tmp/*.allocationData
export ALLOCATION_MIN_SIZE=$allocationMinSize

eventString="cpu/mem-loads,ldlat=1,period=$sampleRate/P"
if [ $dramBandwidth = 1 ] && [ $l1MissLatency = 1 ]
then
	echo "Measurement of dramBandwidth and l1MissLatency at the same time is not suppored"
elif [ $dramBandwidth = 0 ] && [ $l1MissLatency = 0 ]
then
	eventString+=",cpu/mem-stores,period=$writeSampleRate/P,cpu/cpu-cycles,period=$cycleSampleRate/P,cpu/instructions,period=$cycleSampleRate/P"
elif [ $dramBandwidth = 1 ]
then
	eventString+=",cpu/offcore_response.all_reads.llc_miss.local_dram,period=$offcoreSampleRate,call-graph=no/D,cpu/offcore_response.all_reads.llc_miss.remote_dram,period=$offcoreSampleRate,call-graph=no/D"
elif [ $l1MissLatency = 1 ]
then
	eventString+=",cpu/l1d_pend_miss.pending,period=$l1MissSampleRate,call-graph=no/D,cpu/mem_load_uops_retired.l1_miss,period=$sampleRate,call-graph=no/D,cpu/mem_load_uops_retired.hit_lfb,period=$sampleRate,call-graph=no/D"
fi

#$perf record --sample-cpu -d -W -e "$eventString" -g -k CLOCK_MONOTONIC -o /tmp/perf.data -- "$@"

LD_PRELOAD=`dirname $0`/allocationTracker/ldlib.so $perf record --sample-cpu -d -W -e "$eventString" -g -k CLOCK_MONOTONIC -o /tmp/perf.data -- "$@"
allocSize=$(du -ch /tmp/*.allocationData | tail -1)
echo "Captured $allocSize of allocation data"
$perf script -i /tmp/perf.data -s `dirname $0`/perfSqliteExport/exportToSqlite.py /tmp/perf.db -c
cmdline="$@"
addArg=""
if [ $dramBandwidth = 1 ]
then
	addArg="--dramBandwidth"
fi
if [ $l1MissLatency = 1 ]
then
	addArg="--l1MissLatency"
fi
`dirname $0`/prepareDatabase/prepareDatabase /tmp/perf.db -c $sampleRate -a $allocationMinSize -l "$cmdline" "$addArg"
cp /tmp/perf.db $filename
rm /tmp/perf.db

